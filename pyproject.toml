[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gaudi3-scale-starter"
version = "0.1.0"
description = "Production Infrastructure for Intel Gaudi 3 HPU Clusters"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Distributed Computing"
]
requires-python = ">=3.10"
dependencies = [
    "torch>=2.3.0",
    "pytorch-lightning>=2.2.0",
    "transformers>=4.36.0",
    "datasets>=2.15.0",
    "wandb>=0.16.0",
    "tensorboard>=2.16.0",
    "click>=8.1.0",
    "pydantic>=2.5.0",
    "pyyaml>=6.0.1",
    "rich>=13.7.0",
    "typer>=0.9.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "bandit>=1.7.5",
    "safety>=2.3.0"
]
habana = [
    "habana-torch-plugin>=1.16.0",
    "habana-torch-dataloader>=1.16.0"
]
terraform = [
    "python-terraform>=0.10.1",
    "boto3>=1.34.0",
    "azure-mgmt-compute>=30.4.0"
]
monitoring = [
    "prometheus-client>=0.19.0",
    "grafana-api>=1.0.3",
    "psutil>=5.9.6"
]

[project.scripts]
gaudi3-train = "gaudi3_scale.cli:train"
gaudi3-deploy = "gaudi3_scale.cli:deploy"
gaudi3-benchmark = "gaudi3_scale.cli:benchmark"

[project.urls]
Homepage = "https://github.com/yourusername/gaudi3-scale-starter"
Documentation = "https://gaudi3-scale.readthedocs.io"
Repository = "https://github.com/yourusername/gaudi3-scale-starter"
Issues = "https://github.com/yourusername/gaudi3-scale-starter/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["gaudi3_scale"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=gaudi3_scale",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]