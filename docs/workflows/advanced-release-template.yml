# Advanced Release Automation Template for Gaudi 3 Scale
# Copy this file to .github/workflows/release.yml to activate

name: Release Automation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          if [[ "${VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Validate Version Format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: ${{ steps.version.outputs.version }}"
            exit 1
          fi

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate-release
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,habana,monitoring]"

      - name: Run Full Test Suite
        run: |
          pytest \
            --cov=gaudi3_scale \
            --cov-report=xml \
            --cov-fail-under=80 \
            --junitxml=junit-${{ matrix.python-version }}.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: junit-${{ matrix.python-version }}.xml

  build-package:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Build Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Update Version
        run: |
          VERSION=${{ needs.validate-release.outputs.version }}
          VERSION_NUM=${VERSION#v}
          sed -i "s/version = \".*\"/version = \"${VERSION_NUM}\"/" pyproject.toml

      - name: Build Package
        run: python -m build

      - name: Check Package
        run: twine check dist/*

      - name: Generate Hashes
        id: hash
        run: |
          cd dist
          HASHES=$(sha256sum * | base64 -w0)
          echo "hashes=${HASHES}" >> $GITHUB_OUTPUT

      - name: Upload Package Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  build-container:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: container-sbom
          path: sbom.spdx.json

  generate-provenance:
    name: Generate SLSA Provenance
    needs: [validate-release, build-package]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    with:
      base64-subjects: ${{ needs.build-package.outputs.hashes }}
      upload-assets: true

  security-scan-release:
    name: Security Scan Release Artifacts
    runs-on: ubuntu-latest
    needs: [build-package, build-container]
    steps:
      - uses: actions/checkout@v4

      - name: Download Package Artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/

      - name: Scan Python Package
        run: |
          pip install safety bandit
          cd dist
          tar -xzf *.tar.gz
          PACKAGE_DIR=$(find . -type d -name "gaudi3_scale*" | head -1)
          safety check --file ${PACKAGE_DIR}/requirements.txt || true
          bandit -r ${PACKAGE_DIR}/ -f json -o bandit-release.json || true

      - name: Scan Container Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
          format: 'sarif'
          output: 'container-scan.sarif'

      - name: Upload Security Scan Results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            bandit-release.json
            container-scan.sarif

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-package, generate-provenance, security-scan-release]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: pypi
    steps:
      - name: Download Package Artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/

      - name: Publish to Test PyPI
        if: needs.validate-release.outputs.is_prerelease == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}

      - name: Publish to PyPI
        if: needs.validate-release.outputs.is_prerelease == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-package, build-container, generate-provenance]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Generate Release Notes
        id: release-notes
        run: |
          VERSION=${{ needs.validate-release.outputs.version }}
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          cat > release-notes.md << EOF
          # Release ${VERSION}
          
          ## 🚀 What's New
          
          $(if [ -n "${PREV_TAG}" ]; then
            git log --pretty=format:"- %s" ${PREV_TAG}..HEAD | grep -E "^- (feat|feature)" | head -10
          fi)
          
          ## 🐛 Bug Fixes
          
          $(if [ -n "${PREV_TAG}" ]; then
            git log --pretty=format:"- %s" ${PREV_TAG}..HEAD | grep -E "^- (fix|bug)" | head -10
          fi)
          
          ## 📦 Container Images
          
          - \`ghcr.io/${{ github.repository }}:${VERSION}\`
          - \`ghcr.io/${{ github.repository }}:latest\`
          
          ## 🔒 Security
          
          This release includes SLSA Level 3 provenance attestation and comprehensive security scanning.
          
          ## 📋 Checksums
          
          See attached provenance file for detailed checksums and build attestation.
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: ${{ needs.validate-release.outputs.version }}
          body_path: release-notes.md
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}
          files: |
            artifacts/python-package/*
            artifacts/container-sbom/*
            artifacts/attestation/*

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-github-release, publish-pypi]
    if: always()
    steps:
      - name: Release Success Notification
        if: needs.create-github-release.result == 'success'
        run: |
          echo "🎉 Release ${{ needs.validate-release.outputs.version }} published successfully!"
          echo "📦 PyPI: https://pypi.org/project/gaudi3-scale-starter/"
          echo "🐳 Container: ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}"

      - name: Release Failure Notification
        if: failure()
        run: |
          echo "❌ Release ${{ needs.validate-release.outputs.version }} failed!"
          echo "Please check the workflow logs for details."