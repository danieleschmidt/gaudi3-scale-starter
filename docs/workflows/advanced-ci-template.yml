# Advanced CI Pipeline Template for Gaudi 3 Scale
# Copy this file to .github/workflows/ci.yml to activate

name: Comprehensive CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.8.0"

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: GitGuardian Security Scan
        uses: GitGuardian/ggshield/actions/secret@v1.25.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Security Tools
        run: |
          pip install bandit[toml] safety detect-secrets

      - name: Run Bandit Security Linter
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: Run Safety Dependency Check
        run: safety check --json --output safety-report.json || true

      - name: Detect Secrets Scan
        run: detect-secrets scan --baseline .secrets.baseline

      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  quality-gate:
    name: Code Quality Gate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,habana,monitoring]"

      - name: Lint with Ruff
        run: |
          ruff check --output-format=github .
          ruff format --check .

      - name: Type Check with MyPy
        run: mypy src/

      - name: Run Tests with Coverage
        run: |
          pytest \
            --cov=gaudi3_scale \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=80 \
            --junitxml=junit.xml \
            -m "not (gpu or slow)"

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          pip install -e ".[dev]" pytest-benchmark

      - name: Run Performance Tests
        run: |
          pytest tests/performance/ \
            --benchmark-json=benchmark.json \
            --benchmark-only

      - name: Performance Regression Check
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false
          comment-on-alert: true
          alert-threshold: '130%'

  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Container
        run: |
          docker build -t gaudi3-scale:test .

      - name: Run Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'gaudi3-scale:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [security-scan, quality-gate]
    services:
      prometheus:
        image: prom/prometheus:latest
        ports:
          - 9090:9090
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          pip install -e ".[dev,monitoring]"

      - name: Start Test Environment
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 30

      - name: Run Integration Tests
        run: |
          pytest tests/integration/ \
            --tb=short \
            -v

      - name: Cleanup Test Environment
        if: always()
        run: docker-compose down

  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [security-scan, quality-gate, performance-benchmarks, container-security, integration-tests]
    if: always()
    steps:
      - name: Notify Success
        if: ${{ needs.security-scan.result == 'success' && needs.quality-gate.result == 'success' && needs.container-security.result == 'success' }}
        run: |
          echo "✅ All quality gates passed successfully!"

      - name: Notify Failure
        if: ${{ needs.security-scan.result == 'failure' || needs.quality-gate.result == 'failure' || needs.container-security.result == 'failure' }}
        run: |
          echo "❌ Quality gates failed. Check the logs for details."
          exit 1