name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.10'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validate release prerequisites
  validate-release:
    name: Validate Release Prerequisites
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
            if [[ $VERSION =~ -[a-zA-Z] ]]; then
              IS_PRERELEASE=true
            else
              IS_PRERELEASE=false
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi

      - name: Check changelog entry
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! grep -q "$VERSION" CHANGELOG.md; then
            echo "Warning: No changelog entry found for $VERSION"
          fi

  # Run full test suite before release
  release-tests:
    name: Release Test Suite
    runs-on: ubuntu-latest
    needs: validate-release
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run comprehensive tests
        run: |
          pytest tests/ -v --cov=gaudi3_scale --cov-fail-under=80

      - name: Run security checks
        run: |
          bandit -r src/
          safety check

  # Build release artifacts
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release, release-tests]
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          pip install --upgrade pip build twine

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NUM=${VERSION#v}
          sed -i "s/version = \".*\"/version = \"$VERSION_NUM\"/" pyproject.toml

      - name: Build package
        id: build
        run: |
          python -m build
          echo "artifact-name=gaudi3-scale-${{ needs.validate-release.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Verify package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: dist/

  # Build and push Docker images
  build-docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, release-tests]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ needs.validate-release.outputs.version }}
          path: sbom.spdx.json

  # Security scanning of release artifacts
  security-scan-release:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-docker]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Generate release notes and changelog
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      release-notes: ${{ steps.notes.outputs.release-notes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: notes
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const version = '${{ needs.validate-release.outputs.version }}';
            
            // Get previous tag
            const tags = await github.rest.repos.listTags({ owner, repo });
            const currentTagIndex = tags.data.findIndex(tag => tag.name === version);
            const previousTag = currentTagIndex < tags.data.length - 1 ? 
              tags.data[currentTagIndex + 1].name : null;
            
            let releaseNotes = `## What's Changed in ${version}\n\n`;
            
            if (previousTag) {
              // Get commits between tags
              const commits = await github.rest.repos.compareCommits({
                owner,
                repo,
                base: previousTag,
                head: version
              });
              
              const features = [];
              const fixes = [];
              const others = [];
              
              commits.data.commits.forEach(commit => {
                const message = commit.commit.message.split('\n')[0];
                if (message.startsWith('feat:') || message.startsWith('feature:')) {
                  features.push(`- ${message.replace(/^feat:?\s*/i, '')}`);
                } else if (message.startsWith('fix:') || message.startsWith('bug:')) {
                  fixes.push(`- ${message.replace(/^fix:?\s*/i, '')}`);
                } else if (!message.startsWith('docs:') && !message.startsWith('style:')) {
                  others.push(`- ${message}`);
                }
              });
              
              if (features.length > 0) {
                releaseNotes += '### ✨ New Features\n' + features.join('\n') + '\n\n';
              }
              if (fixes.length > 0) {
                releaseNotes += '### 🐛 Bug Fixes\n' + fixes.join('\n') + '\n\n';
              }
              if (others.length > 0) {
                releaseNotes += '### 🔧 Other Changes\n' + others.join('\n') + '\n\n';
              }
            }
            
            releaseNotes += `**Full Changelog**: https://github.com/${owner}/${repo}/compare/${previousTag || 'HEAD'}...${version}`;
            
            core.setOutput('release-notes', releaseNotes);

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, build-docker, security-scan-release, generate-release-notes]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build-release.outputs.artifact-name }}
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-release-notes.outputs.release-notes }}
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
          files: |
            dist/*
          generate_release_notes: true
          make_latest: ${{ needs.validate-release.outputs.is_prerelease == 'false' }}

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: ${{ needs.validate-release.outputs.is_prerelease == 'false' }}
    environment: pypi
    permissions:
      id-token: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build-release.outputs.artifact-name }}
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  # Post-release tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always() && needs.create-release.result == 'success'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update documentation
        run: |
          # Update version references in documentation
          VERSION="${{ needs.validate-release.outputs.version }}"
          find docs/ -name "*.md" -type f -exec sed -i "s/version: [0-9]\+\.[0-9]\+\.[0-9]\+/version: ${VERSION#v}/g" {} \;

      - name: Create post-release PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'docs: update version references after ${{ needs.validate-release.outputs.version }} release'
          title: 'Post-release: Update documentation for ${{ needs.validate-release.outputs.version }}'
          body: |
            This PR updates version references in documentation after the ${{ needs.validate-release.outputs.version }} release.
            
            - Updated version references in documentation
            - Auto-generated after successful release
          branch: post-release-${{ needs.validate-release.outputs.version }}
          base: main

      - name: Notify team
        if: success()
        run: |
          echo "🚀 Release ${{ needs.validate-release.outputs.version }} completed successfully!"
          echo "📦 Package published to PyPI"
          echo "🐳 Docker images pushed to registry"
          echo "📋 Release notes generated"